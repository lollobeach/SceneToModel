# Module bridge to Extended HTTP Requests.
# This bridge is currently specific for ADOxx 1.8.0-a6.
# This allows to use "old" AdoScript code that relied on the Extended HTTP
# Requests module, but using the ADOxx features instead ("AdoScript"
# HTTP_REQUEST command etc.).
# It allows for some backwards compatibility.

# Avoid using these procedures in new projects!
# Use the "AdoScript" HTTP_REQUEST command instead!
# Use encodeuri(...) and tourlquerystring(...) functions instead!



# Specifies whether verification of certificats should be skipped.
# Set to 1 to skip verification.
SETG global_val_skipVerification:(0)



#------------------------------------------------------------------------------
PROCEDURE global HTTP_SEND_REQUEST string:str_url
      str_method:string
      map_reqheaders:map
      str_reqbody:string
      val_respcode:reference
      map_respheaders:reference
      str_respbody:reference
#------------------------------------------------------------------------------
{
  CC "AdoScript" HTTP_REQUEST (str_url) method:(str_method)
      reqheader:(map_reqheaders) reqbody:(str_reqbody)
      certver-off:(global_val_skipVerification)
  IF (ecode) {
    SETL val_respcode:(0)
    SETL map_respheaders:(map())
  } ELSE {
    SETL val_respcode:(statuscode)
    SETL map_respheaders:(header)
  }
  SETL str_respbody:(response)
}


#------------------------------------------------------------------------------
PROCEDURE global HTTP_SEND_AUTH_REQUEST string:str_url
      str_method:string
      str_username:string
      str_password:string
      map_reqheaders:map
      str_reqbody:string
      val_respcode:reference
      map_respheaders:reference
      str_respbody:reference
#------------------------------------------------------------------------------
{
  CC "AdoScript" HTTP_REQUEST (str_url) method:(str_method)
      username:(str_username) password:(str_password)
      reqheader:(map_reqheaders) reqbody:(str_reqbody)
      certver-off:(global_val_skipVerification)
  IF (ecode) {
    SETL val_respcode:(0)
    SETL map_respheaders:(map())
  } ELSE {
    SETL val_respcode:(statuscode)
    SETL map_respheaders:(header)
  }
  SETL str_respbody:(response)
}


#------------------------------------------------------------------------------
PROCEDURE global HTTP_SEND_REQUEST_BASE string:str_url
      str_method:string
      map_reqheaders:map
      str_reqbody:string
      val_respcode:reference
      map_respheaders:reference
      str_respbody:reference
#------------------------------------------------------------------------------
{
  CC "AdoScript" HTTP_REQUEST (str_url) method:(str_method)
      reqheader:(map_reqheaders) reqbody:(str_reqbody)
      base64:(1)
      certver-off:(global_val_skipVerification)
  IF (ecode) {
    SETL val_respcode:(0)
    SETL map_respheaders:(map())
  } ELSE {
    SETL val_respcode:(statuscode)
    SETL map_respheaders:(header)
  }
  SETL str_respbody:(response)
}


#------------------------------------------------------------------------------
PROCEDURE global HTTP_SEND_AUTH_REQUEST_BASE string:str_url
      str_method:string
      str_username:string
      str_password:string
      map_reqheaders:map
      str_reqbody:string
      val_respcode:reference
      map_respheaders:reference
      str_respbody:reference
#------------------------------------------------------------------------------
{
  CC "AdoScript" HTTP_REQUEST (str_url) method:(str_method)
      username:(str_username) password:(str_password)
      reqheader:(map_reqheaders) reqbody:(str_reqbody)
      base64:(1)
      certver-off:(global_val_skipVerification)
  IF (ecode) {
    SETL val_respcode:(0)
    SETL map_respheaders:(map())
  } ELSE {
    SETL val_respcode:(statuscode)
    SETL map_respheaders:(header)
  }
  SETL str_respbody:(response)
}


#------------------------------------------------------------------------------
PROCEDURE global HTTP_SEND_REQUEST_BYTES string:str_url
      str_method:string
      map_reqheaders:map
      str_reqbody:string
      val_respcode:reference
      map_respheaders:reference
      arr_respbody:reference
#------------------------------------------------------------------------------
{
  # This procedure is no longer supported.
  SETG ecode:(1)
  SETL val_respcode:(0)
  SETL map_respheaders:(map())
  SETL arr_respbody:({})
}


#------------------------------------------------------------------------------
PROCEDURE global HTTP_SEND_AUTH_REQUEST_BYTES string:str_url
      str_method:string
      str_username:string
      str_password:string
      map_reqheaders:map
      str_reqbody:string
      val_respcode:reference
      map_respheaders:reference
      arr_respbody:reference
#------------------------------------------------------------------------------
{
  # This procedure is no longer supported.
  SETG ecode:(1)
  SETL val_respcode:(0)
  SETL map_respheaders:(map())
  SETL arr_respbody:({})
}


#------------------------------------------------------------------------------
PROCEDURE global HTTP_SEND_REQUEST_INBASE string:str_url
      str_method:string
      map_reqheaders:map
      str_reqbody:string
      val_respcode:reference
      map_respheaders:reference
      str_respbody:reference
#------------------------------------------------------------------------------
{
  CC "AdoScript" HTTP_REQUEST (str_url) method:(str_method)
      reqheader:(map_reqheaders) reqbody:(str_reqbody)
      base64-request:(1)
      certver-off:(global_val_skipVerification)
  IF (ecode) {
    SETL val_respcode:(0)
    SETL map_respheaders:(map())
  } ELSE {
    SETL val_respcode:(statuscode)
    SETL map_respheaders:(header)
  }
  SETL str_respbody:(response)
}


#------------------------------------------------------------------------------
PROCEDURE global HTTP_SEND_AUTH_REQUEST_INBASE string:str_url
      str_method:string
      str_username:string
      str_password:string
      map_reqheaders:map
      str_reqbody:string
      val_respcode:reference
      map_respheaders:reference
      str_respbody:reference
#------------------------------------------------------------------------------
{
  CC "AdoScript" HTTP_REQUEST (str_url) method:(str_method)
      username:(str_username) password:(str_password)
      reqheader:(map_reqheaders) reqbody:(str_reqbody)
      base64-request:(1)
      certver-off:(global_val_skipVerification)
  IF (ecode) {
    SETL val_respcode:(0)
    SETL map_respheaders:(map())
  } ELSE {
    SETL val_respcode:(statuscode)
    SETL map_respheaders:(header)
  }
  SETL str_respbody:(response)
}


#------------------------------------------------------------------------------
PROCEDURE global HTTP_SEND_REQUEST_BASE_INBASE string:str_url
      str_method:string
      map_reqheaders:map
      str_reqbody:string
      val_respcode:reference
      map_respheaders:reference
      str_respbody:reference
#------------------------------------------------------------------------------
{
  CC "AdoScript" HTTP_REQUEST (str_url) method:(str_method)
      reqheader:(map_reqheaders) reqbody:(str_reqbody)
      base64-request:(1) base64:(1)
      certver-off:(global_val_skipVerification)
  IF (ecode) {
    SETL val_respcode:(0)
    SETL map_respheaders:(map())
  } ELSE {
    SETL val_respcode:(statuscode)
    SETL map_respheaders:(header)
  }
  SETL str_respbody:(response)
}


#------------------------------------------------------------------------------
PROCEDURE global HTTP_SEND_AUTH_REQUEST_BASE_INBASE string:str_url
      str_method:string
      str_username:string
      str_password:string
      map_reqheaders:map
      str_reqbody:string
      val_respcode:reference
      map_respheaders:reference
      str_respbody:reference
#------------------------------------------------------------------------------
{
  CC "AdoScript" HTTP_REQUEST (str_url) method:(str_method)
      username:(str_username) password:(str_password)
      reqheader:(map_reqheaders) reqbody:(str_reqbody)
      base64-request:(1) base64:(1)
      certver-off:(global_val_skipVerification)
  IF (ecode) {
    SETL val_respcode:(0)
    SETL map_respheaders:(map())
  } ELSE {
    SETL val_respcode:(statuscode)
    SETL map_respheaders:(header)
  }
  SETL str_respbody:(response)
}


#------------------------------------------------------------------------------
PROCEDURE global HTTP_SEND_REQUEST_BYTES_INBASE string:str_url
      str_method:string
      map_reqheaders:map
      str_reqbody:string
      val_respcode:reference
      map_respheaders:reference
      arr_respbody:reference
#------------------------------------------------------------------------------
{
  # This procedure is no longer supported.
  SETG ecode:(1)
  SETL val_respcode:(0)
  SETL map_respheaders:(map())
  SETL arr_respbody:({})
}


#------------------------------------------------------------------------------
PROCEDURE global HTTP_SEND_AUTH_REQUEST_BYTES_INBASE string:str_url
      str_method:string
      str_username:string
      str_password:string
      map_reqheaders:map
      str_reqbody:string
      val_respcode:reference
      map_respheaders:reference
      arr_respbody:reference
#------------------------------------------------------------------------------
{
  # This procedure is no longer supported.
  SETG ecode:(1)
  SETL val_respcode:(0)
  SETL map_respheaders:(map())
  SETL arr_respbody:({})
}



#------------------------------------------------------------------------------
PROCEDURE global HTTP_URL_ENCODE string:str_content
      str_allowedset:string
      str_encoded:reference
#------------------------------------------------------------------------------
{
  IF (str_allowedset = "Inter") {
    SETL str_encoded:(encodeuri(str_content, "!\"$'()*,-./0123456789;ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"))
  } ELSIF (str_allowedset = "Lax") {
    SETL str_encoded:(encodeuri(str_content, "!\"$'()*,-./0123456789:;<>@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"))
  } ELSIF (str_allowedset = "VeryLax") {
    SETL str_encoded:(encodeuri(str_content, "!\"#$'()*+,-./0123456789:;<<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"))
  } ELSE {
    SETL str_encoded:(encodeuri(str_content, "!'()*-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"))
  }
}


#------------------------------------------------------------------------------
PROCEDURE global HTTP_URL_ENCODE_QUERY map:map_content
      str_allowedset:string
      str_encoded:reference
#------------------------------------------------------------------------------
{
  IF (str_allowedset = "Inter") {
    SETL str_encoded:(tourlquerystring(str_content, "!\"$'()*,-./0123456789;ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"))
  } ELSIF (str_allowedset = "Lax") {
    SETL str_encoded:(tourlquerystring(str_content, "!\"$'()*,-./0123456789:;<>@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"))
  } ELSIF (str_allowedset = "VeryLax") {
    SETL str_encoded:(tourlquerystring(str_content, "!\"#$'()*+,-./0123456789:;<<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"))
  } ELSE {
    SETL str_encoded:(tourlquerystring(str_content, "!'()*-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~"))
  }
}
