# TODO: remove once the script is ultimated
SCENE_RECOGNITION

# Object Detection from trained model: 
#   1) load an image from local path,
#   2) send the image through REST API to an endpoint
#   3) await REST response to represent the recognized model from the algorithm
PROCEDURE global SCENE_RECOGNITION
{    
    ##########      1. BACKGROUND IMAGE CHECK     ##########

    # Check that the user have selected a background image
    CC "Modeling" GET_ACT_MODEL
    SETL actModel:(modelid)
    
    # If there's no background image selected open the desired image and display it as the background of the model
    CC "Core" GET_ATTR_VAL objid:(actModel) attrname:"Load image"
    IF(val = "") {
        CC "AdoScript" FILE_DIALOG open
            filter1:"BMP files" type1:"*.bmp"
            filter2:"JPEG files" type2:"*.jpg"
            filter3:"PNG files" type3:"*.png"
        CC "Core" SET_ATTR_VAL objid: (actModel) attrname: "Load image" val: (path)
    }

    # GET API TOKEN 
	#SETL headers: (map())
	CC "AdoScript" EDITFIELD title:"Optional parameters" caption:"Parameter" text:"NParameters"
	IF (ecode != 0) {
       EXIT
    }
	#SET apiToken: (text)
	#SETL headers["Authorization"]: (apiToken)
	#SETL headers["Content-Type"]:("application/json;odata=verbose")


    # else, if it has been declared before, proceed with the image send
    SETL url: ("http://localhost:3000/upload")
    SETL headers:(map())
	HTTP_SEND_REQUEST(url) str_method:("POST") map_reqheaders:(headers) str_reqbody:(val) val_respcode:respstat map_respheaders:respheaders str_respbody:str_respbody
	#SETL mapRespBody: (fromJson(str_respbody))
	#SETL objectsArray:(mapRespBody["value"])

	# Check if application name is correct, if it's not exit 
	#IF(type(mapRespBody["error"]) != "undefined") {
	#	CC "AdoScript" WARNINGBOX("Application subdomain not valid.\n\n" + STR mapRespBody)
	#	SETG subdomainNotValid:1
	#	EXIT
	#}

   
}





# Create new object and set new name (and Name) value
PROCEDURE global CREATE_NEW_OBJECTS 
modelid:reference
objects:reference
{        
    EXTRACT_CLASSIDS    # always usefull

    FOR i from:0 to:(LEN objects-1) {
		SETL objectType:(objects[i] SUB "objectType")
        SETL capability1:(objects[i] SUB "capability1")
		SETL capability2:(objects[i] SUB "capability2")
		SETL specification:(objects[i] SUB "Nspecification")
		SETL xPosition:(objects[i] SUB "Xposition")
        SETL yPosition:(objects[i] SUB "Yposition")


        IF( objectType = "person") {
	        CC "Core" CREATE_OBJ modelid:(modelid) classid:(personClassId)
        } ELSIF(objectType ="gateway") {
	        CC "Core" CREATE_OBJ modelid:(modelid) classid:(gatewayClassId)
        } ELSIF(objectType ="thermometer") {
	        CC "Core" CREATE_OBJ modelid:(modelid) classid:(thermometerClassId)
        } ELSIF(objectType ="photocell") {
	        CC "Core" CREATE_OBJ modelid:(modelid) classid:(photocellClassId)
        } ELSIF(objectType ="airQuality") {
	        CC "Core" CREATE_OBJ modelid:(modelid) classid:(airQualityClassId)
        }
    	SETL newObjId:(objid)
        SET_SPECIFICATIONS objID: (STR newObjId) specs: (specs)
	    CC "Core" SET_ATTR_VAL objid:(newObjId) attrname:("name") val:(objectType)
    	CC "Core" SET_ATTR_VAL objid:(newObjId) attrname:("Name") val:(objectType)

        SETL x:(CM(xPosition))
        SETL y:(CM(yPosition))

        CC "Modeling" SET_OBJ_POS objid:(newObjId) x:(x) y:(y)


        # SPECIFICATION TABLE ATTRIBUTES & PSM_TYPEs
		#CC "Core" GET_ATTR_ID classid:(deviceClassId) attrname:("specification")

		#CC "Core" GET_REC_ATTR_ROW_ID objid:(newObjId) attrid:(attrid) index:1
        #CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(capability1)

        #CC "Core" GET_REC_ATTR_ROW_ID objid:(newObjId) attrid:(attrid) index:2
        #CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(capability2)

		#CC "Core" GET_REC_ATTR_ROW_ID objid:(newObjId) attrid:(attrid) index:3
        #CC "Core" SET_ATTR_VAL objid:(rowid) attrname:("Value") val:(specification)
    }
}

# Call this procedure once to avoid repeating n times the GET_CLASS_ID command call
PROCEDURE global EXTRACT_CLASSIDS 
{
	# Classes
    CC "Core" GET_CLASS_ID classname:("person")
	SETG personClassId:(classid)
    CC "Core" GET_CLASS_ID classname:("airQuality")
	SETG airQualityClassId:(classid)
    CC "Core" GET_CLASS_ID classname:("thermometer")
	SETG thermometerClassId:(classid)
    CC "Core" GET_CLASS_ID classname:("gateway")
	SETG gatewayClassId:(classid)
    CC "Core" GET_CLASS_ID classname:("photocell")
    SETG photocellClassId:(classid)

	# Relation classes
	CC "Core" GET_CLASS_ID classname:("objDetLink")
	SETG objDetLinkClassId:(classid)
}


PROCEDURE global SET_SPECIFICATIONS
objID:string    # Object's id
specs:map       # Platform's specifications
{
    # Get object's classname
    CC "Core" GET_CLASS_ID objid:(VAL objID)
    CC "Core" GET_CLASS_NAME classid:(classid)
    SETL class:(specs[classname])
    
    IF (type(class) = "map") {
        CC "Core" GET_ATTR_ID classid:(classid) attrname:("specification")
        IF (attrid != -1 AND type(class["specs"]) = "map") {
            SETL attrs:(mapKeysArray(class["specs"]))
            FOR j from:0 to:(attrs.length-1) {
                # Add attribute to specification table
                SETL attrClass:(class["specs"][attrs[j]])
                CC "Core" ADD_REC_ROW objid:(VAL objID) attrid:(attrid)
                CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Attribute" val:(attrs[j])
                IF (type(attrClass) = "map") {
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Type" val:(attrClass["type"])
                    CC "Core" SET_ATTR_VAL objid:(rowid) attrname:"Description" val:(attrClass["description"])
                }
                IF (ecode != 0) {
                    CC "AdoScript" ERRORBOX ("Error adding a row to attribute \"" + (attrs[j]) + "\"")
                    EXIT
                }
            }
        }
        # Get all outcoming connectors
        IF (type(class["config"]) != "undefined") {
            CC "Core" GET_CONNECTORS objid:(VAL objID) out
            FOR connector in:(objids) {
                # Add connector types
                SETL types:(lam_toList(class["output"], "~"))
                CC "Core" SET_ATTR_VAL objid:(VAL connector) attrname:"available_types" val:(types)
            }
        }
    } ELSIF (type(class) = "array") {
        SETL types:(mapKeysList(class[0]))
        CC "Core" SET_ATTR_VAL objid:(VAL objID) attrname:("available_types") val:(types)
    }
}

## Procedure to get platform specifications
PROCEDURE global GET_SPECIFICATIONS 
platform:string     # Platform's name
specs:reference     # Platform's specifications (output)
{
    # Select right file
    SETL filePath:(-1)
    IF (platform = "Object_detection") {
        SETL filePath:("db:\\Object_detection.json")
    } 

    # Read JSON file
    CC "AdoScript" FREAD file:(filePath)
    IF (ecode != 0) {
        CC "AdoScript" ERRORBOX ("The file is not readable!") ok
        EXIT
    }

    # Convert file content to JSON
    SETL specs:(fromJson(text))
}